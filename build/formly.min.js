!function(window,document,undefined){"use strict";angular.module("ambersive.formly",["formly","ngLocale","ngMessages","ui.select","ngSanitize","ui.tinymce","ui.bootstrap","ui.codemirror","colorpicker.module"]),angular.module("ambersive.formly").provider("$formlyBootstrapSettings",[function(){var a={cssError:"error",cssErrorInput:"error",cssSuccess:"success",cssWarning:"warning",formControl:"form-control-",formGroup:"has-",dateLayout:"d m y",dateFormat:"d m y",dateDelimiter:"(\\.|\\/|\\-|\\s)",monthFormat:"MMMM",regex:{email:"^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$"},lang:{fallbackError:" An error occurs. Please check the field again.",required:"Please fill out the field. This field is required.",email:"This is not a valid e-mail address",add:"Add",remove:"Remove"},tinyMCETheme:"bootstrap",tinyMCEThemeUrl:"../build/skins/bootstrap",tinyMCE:{statusbar:!1,menubar:!1,toolbar_items_size:"small",toolbar:"bold italic | alignleft aligncenter alignright alignjustify | bullist numlist",content_css:[],plugins:["visualblocks"]}},b=function(b,c,d){var e,f=d.options,g=!1,h=!1,i=f.templateOptions.type;switch(i===undefined&&(i="text"),angular.isDefined(f.templateOptions)&&angular.isDefined(f.templateOptions.regex)&&angular.isString(f.templateOptions.regex)&&(f.templateOptions.regex=[f.templateOptions.regex]),i){case"email":e=new RegExp(a.regex[i]),g=!0}return h=g===!1?!0:e.test(b)};return{validation:b,setLang:function(b,c){a.lang[b]!==undefined&&(a.lang[b]=c)},setTinyMCE:function(b,c){a.tinyMCE[b]!==undefined&&(a.tinyMCE[b]=c)},setRegex:function(b,c){a.regex[b]!==undefined&&(a.regex[b]=c)},setValue:function(b,c){a[b]!==undefined&&(a[b]=c)},$get:function(){return a}}}]),angular.module("ambersive.formly").config(["formlyConfigProvider","$formlyBootstrapSettingsProvider",function(a,b){a.setType({name:"bootstrap_input",templateUrl:"src/views/formly.ambersive.default.html",controller:"FormlyBootstrapsCtrl as FormlyBootstrap",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_input_check",templateUrl:"src/views/formly.ambersive.check.html",controller:"FormlyBootstrapsCheckCtrl as FormlyBootstrapCheck",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_color",templateUrl:"src/views/formly.ambersive.color.html",controller:"FormlyBootstrapsColorCtrl as FormlyBootstrapColor",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_date",templateUrl:"src/views/formly.ambersive.date.html",controller:"FormlyBootstrapsDateCtrl as FormlyBootstrapDate",defaultOptions:{templateOptions:{},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_select",templateUrl:"src/views/formly.ambersive.select.html",controller:"FormlyBootstrapsSelectCtrl as FormlyBootstrapSelect",defaultOptions:{templateOptions:{onChange:function(a,b,c){}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_select2",templateUrl:"src/views/formly.ambersive.select2.html",controller:"FormlyBootstrapsSelect2Ctrl as FormlyBootstrapSelect2",defaultOptions:{validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_tags",templateUrl:"src/views/formly.ambersive.tags.html",controller:"FormlyBootstrapsTagsCtrl as FormlyBootstrapTags",defaultOptions:{validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_textarea",templateUrl:"src/views/formly.ambersive.textarea.html",controller:"FormlyBootstrapsTextareaCtrl as FormlyBootstrapTextarea",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){}}}}),a.setType({name:"bootstrap_checkbox",templateUrl:"src/views/formly.ambersive.checkbox.html",controller:"FormlyBootstrapsCheckboxCtrl as FormlyBootstrapCheckbox",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_checkboxlist",templateUrl:"src/views/formly.ambersive.checkbox.list.html",controller:"FormlyBootstrapsCheckboxListCtrl as FormlyBootstrapCheckboxList",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_radio",templateUrl:"src/views/formly.ambersive.radio.html",controller:"FormlyBootstrapsRadioCtrl as FormlyBootstrapRadio",defaultOptions:{templateOptions:{onChange:function(a,b,c){}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_autocomplete",templateUrl:"src/views/formly.ambersive.autocomplete.html",controller:"FormlyBootstrapsAutocompleteCtrl as FormlyBootstrapsAutocomplete",defaultOptions:{templateOptions:{onChange:function(a,b,c){}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_codemirror",templateUrl:"src/views/formly.ambersive.codemirror.html",controller:"FormlyBootstrapsCodemirrorCtrl as FormlyBootstrapCodemirror",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){b.formControl.$setValidity("server",!0)}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_list",templateUrl:"src/views/formly.ambersive.list.html",controller:"FormlyBootstrapsListCtrl as FormlyBootstrapList",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){b.formControl.$setValidity("server",!0)}},validators:{standardValidation:b.validation}}}),a.setType({name:"bootstrap_infos",templateUrl:"src/views/formly.ambersive.infos.html",controller:"FormlyBootstrapsInfosCtrl as FormlyBootstrapInfos",defaultOptions:{}})}]),angular.module("ambersive.formly").run(["$rootScope","$log","formlyConfig","formlyValidationMessages",function(a,b,c,d){c.extras.ngModelAttrsManipulatorPreferBound=!0}]),angular.module("ambersive.formly").factory("FormlyBootstrapSrv",["$q","$log","$rootScope","$formlyBootstrapSettings","$timeout",function($q,$log,$rootScope,$formlyBootstrapSettings,$timeout){var FormlyBootstrapSrv={};return FormlyBootstrapSrv.errorMessages={},FormlyBootstrapSrv.tinyMCEPlugins=[],FormlyBootstrapSrv.serverValidation=function(a,b){var c,d=0,e=[];angular.isDefined(a)&&angular.isObject(a)&&angular.isDefined(b)&&angular.isObject(b)?(d=b.length,a.form.$valid=0===d,a.form.$invalid=0!==d,angular.forEach(a.formFields,function(a){c=function(b){return b.field===a.key?b:void 0},angular.forEach(b,function(b,d){"server"===d&&angular.isArray(b)&&(e=angular.copy(b).filter(c),e.length>0&&angular.isDefined(a.formControl)?(a.formControl.$setValidity("server",!1),a.validation.messages=e):e.length>0&&angular.isDefined(a.formControl)===!1?a.validation.messages=e:0===e.length&&angular.isDefined(a.formControl)===!1?a.validation.messages=[]:a.formControl.$setValidity("server",!0))})})):$log.warn("ambersive.formly: error while updateing the submit validation data")},FormlyBootstrapSrv.validation=function(a,b,c){var d,e=c.options,f=!1,g=!1,h=e.templateOptions.type;switch(h===undefined&&(h="text"),e.templateOptions.regex!==undefined&&angular.isString(e.templateOptions.regex)&&(e.templateOptions.regex=[e.templateOptions.regex]),h){case"email":d=new RegExp($formlyBootstrapSettings.regex[h]),f=!0}return g=f===!1?!0:d.test(a)},FormlyBootstrapSrv.getInputClass=function(a){var b="";return(a.formControl!==undefined&&a.formControl.$invalid===!0&&a.formControl.$untouched===!1||a.hasServerError===!0)&&(b+=" "+$formlyBootstrapSettings.formControl+$formlyBootstrapSettings.cssErrorInput),b},FormlyBootstrapSrv.getGroupClass=function(a,b){var c="";return a.templateOptions!==undefined&&a.templateOptions.cssClass!==undefined&&(c=a.templateOptions.cssClass),(a.formControl!==undefined&&a.formControl.$invalid===!0&&a.formControl.$untouched===!1||a.hasServerError===!0)&&(c+=" "+$formlyBootstrapSettings.formGroup+$formlyBootstrapSettings.cssError),angular.isDefined(b)&&""!==b&&(c+=" hasData"),c},FormlyBootstrapSrv.resolveModelByKey=function(a,b){return angular.isDefined(a)===!0&&angular.isDefined(b)===!0&&angular.isDefined(a[b])===!0?a[b]:null},FormlyBootstrapSrv.hasAddon=function(a,b){return angular.isDefined(b)&&angular.isDefined(b.templateOptions)&&angular.isDefined(b.templateOptions.addons)?null===a?angular.isDefined(b.templateOptions.addons.left)||angular.isDefined(b.templateOptions.addons.right)?!0:!1:angular.isDefined(b.templateOptions.addons[a])?!0:!1:!1},FormlyBootstrapSrv.hasAddonAction=function(a,b){return angular.isDefined(b)&&angular.isDefined(b.templateOptions)&&angular.isDefined(b.templateOptions.addons)?null!==a?(angular.isDefined(b.templateOptions.addons[a])&&angular.isDefined(b.templateOptions.addons[a].action)&&angular.isFunction(b.templateOptions.addons[a].action)&&b.templateOptions.addons[a].action(b,a),!1):void 0:!1},FormlyBootstrapSrv.dateHelper={daysForMonth:function(a,b){return a===undefined&&(a=1),b===undefined&&(b=new Date(Date.UTC()).getFullYear()),new Date(Date.UTC(b,a,0)).getDate()},daysListForMonthAndYear:function(a,b){for(var c=[],d=FormlyBootstrapSrv.dateHelper.daysForMonth(a,b),e=0;d>e;e+=1)c.push(e+1);return c},monthList:function(){for(var a=[],b=0;12>b;b+=1)a.push(b+1);return a},yearList:function(a,b){var c=[],d=(new Date).getFullYear();a===undefined&&(a=30),b===undefined&&(b=1900),d+=a+1;for(var e=b;d>e;e+=1)c.push(e);return c},yearListByStartAndStop:function(a,b){var c=[];b===undefined&&(b=new Date(Date.UTC()).getFullYear()),a===undefined&&(a=1900);for(var d=a;b>d;d+=1)c.push(d);return c}},FormlyBootstrapSrv.getOptionLabel=function(option,labelProp,templateOptions){var label="",labelObj=null,labelParts=[],getOption=function(obj,template){var val="";try{val=eval(template)}catch(err){}return val};if(angular.isDefined(templateOptions)&&angular.isDefined(templateOptions.labelTemplate))label=angular.isFunction(templateOptions.labelTemplate)?templateOptions.labelTemplate(option):getOption(option,templateOptions.labelTemplate);else try{labelProp.indexOf(".")>-1?(labelParts=labelProp.split("."),angular.forEach(labelParts,function(a,b){null===labelObj&&angular.isDefined(option)&&angular.isDefined(option[a])===!0?labelObj=option[a]:null!==labelObj&&angular.isDefined(labelObj[a])===!0&&(labelObj=labelObj[a]),angular.isString(labelObj)===!0?label=labelObj:angular.isFunction(labelObj)===!0&&(label=labelObj())})):option!==undefined&&option[labelProp]!==undefined&&(label=option[labelProp])}catch(err){}return label},FormlyBootstrapSrv.getErrorMessage=function(a,b,c){var d=$formlyBootstrapSettings.lang[b];return angular.isDefined(d)===!1&&"standardValidation"===b&&(d=$formlyBootstrapSettings.lang[a.templateOptions.type]),angular.isDefined(d)===!1&&(d=$formlyBootstrapSettings.lang.fallbackError),d},FormlyBootstrapSrv.setTinyMCEPlugins=function(a){FormlyBootstrapSrv.tinyMCEPlugins.push(a)},FormlyBootstrapSrv.getTinyMCEPlugins=function(){return FormlyBootstrapSrv.tinyMCEPlugins},FormlyBootstrapSrv}]),angular.module("ambersive.formly").controller("FormlyBootstrapsCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(a,c){return d.getGroupClass(b.options,c)},e.hasAddon=d.hasAddon,e.hasAddonAction=d.hasAddonAction,e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)}}]),angular.module("ambersive.formly").controller("FormlyBootstrapsCheckCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.hasAddon=d.hasAddon,e.hasAddonAction=d.hasAddonAction,e.textes={invalid:"invalid",valid:"valid",none:"n/a",progress:"please wait..."},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)},e.value="",e.content="",e.keyDownEvent=null,e.action=function(){if(angular.isDefined(b.options.templateOptions)&&angular.isDefined(b.options.templateOptions.check)&&angular.isFunction(b.options.templateOptions.check))try{b.options.templateOptions.check(e.value).then(function(){e.content=angular.copy(e.textes.valid)},function(){e.content=angular.copy(e.textes.invalid)})}catch(a){e.content=angular.copy(e.textes.invalid)}},e.keydown=function(a){var b=500;angular.isDefined(a)&&13===a.keyCode&&(a.preventDefault(),b=0),e.content=angular.copy(e.textes.progress),clearTimeout(e.keyDownEvent),setTimeout(function(){e.action()},b)},e.force=function(){clearTimeout(e.keyDownEvent),e.action()},e.init=function(){e.value=angular.copy(b.model[b.options.key]),angular.isDefined(b.options.templateOptions.checkValid)&&(e.textes.valid=b.options.templateOptions.checkValid),angular.isDefined(b.options.templateOptions.checkInvalid)&&(e.textes.invalid=b.options.templateOptions.checkInvalid),angular.isDefined(b.options.templateOptions.checkValid)&&(e.textes.none=b.options.templateOptions.checkNone),angular.isDefined(b.options.templateOptions.checkProgress)&&(e.textes.progress=b.options.templateOptions.checkProgress),e.content=angular.copy(e.textes.none)},e.init(),b.$watch("FormlyBootstrapCheck.value",function(){e.keydown(),b.model[b.options.key]=e.value},!0)}]),angular.module("ambersive.formly").controller("FormlyBootstrapsColorCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.hasAddon=d.hasAddon,e.hasAddonAction=d.hasAddonAction,e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)}}]),angular.module("ambersive.formly").controller("FormlyBootstrapsSelectCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.getOptionLabel=d.getOptionLabel,e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)}}]),angular.module("ambersive.formly").controller("FormlyBootstrapsSelect2Ctrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.options=[],e.loaded=!1,e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.getOptionLabel=d.getOptionLabel,e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)},e.choose=function(c,d,e){c!==undefined&&(b.model[b.options.key]=c[b.options.templateOptions.valueProp],a.$broadcast("changeValue",{item:c,options:b.options}))},e.isDefined=angular.isDefined,e.init=function(){var a=[];b.model[b.options.key]!==undefined&&b.options.templateOptions.options!==undefined&&(a=b.options.templateOptions.options.filter(function(a,c){return a[b.options.templateOptions.valueProp]===b.model[b.options.key]?a:void 0}),e.data=a[0])},e.init(),b.$on("FormlyBootstrapSelect2Refresh",function(a,b){e.init()})}]),angular.module("ambersive.formly").directive("myUiSelect",function(){return{require:"uiSelect",link:function(a,b,c,d){}}}),angular.module("ambersive.formly").controller("FormlyBootstrapsTagsCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.customClass="",e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)},e.set=function(a){if(a!==undefined){var c=angular.copy(a),d=[];c.forEach(function(a,c){d.push(a[b.options.templateOptions.valueProp])}),b.model[b.options.key]=d}},e.getOptionsForModel=function(){var a=angular.copy(b.options.templateOptions.options);angular.isArray(a)===!0&&(a=a.filter(function(a){return b.model[b.options.key]!==undefined&&b.model[b.options.key].indexOf(a[b.options.templateOptions.valueProp])>-1?a:void 0}),e.data=a)},e.init=function(){b.options.templateOptions.customClass!==undefined&&(e.customClass=b.options.templateOptions.customClass),e.getOptionsForModel()},e.tagTransform=function(a){var c={};return c[b.options.templateOptions.valueProp]=a,c},e.init(),b.$watch("options.templateOptions.options",function(a,b){e.init()}),b.$watch("FormlyBootstrapTags.data",function(a,b){e.set(a)}),b.$on("FormlyBootstrapTagsRefresh",function(a,b){e.init()})}]),angular.module("ambersive.formly").controller("FormlyBootstrapsTextareaCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv","$timeout","$sce",function(a,b,c,d,e,f){var g=this;g.settings={rows:3},g.getInputClass=function(){return d.getInputClass(b.options)},g.getGroupClass=function(){var a=d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key));return b.options.templateOptions.hasFocus===!0&&(a+=" focus"),a},g.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)},g.init=function(){c.tinyMCE;angular.isDefined(b.options.templateOptions.tinyMCE)&&b.options.templateOptions.tinyMCE===!0&&angular.isDefined(b.options.templateOptions.tinyMCE_Settings)===!0&&(b.options.templateOptions.tinyMCE_Settings.invalid_elements="pre,code",b.options.templateOptions.tinyMCE_Settings.plugins="paste",b.options.templateOptions.disabled===!0&&(b.options.templateOptions.tinyMCE_Settings.readonly=1),b.options.templateOptions.tinyMCE_Settings.setup=function(a){var c=d.getTinyMCEPlugins();angular.forEach(c,function(b){switch(b.type){case"button":a.addButton(b.name,b.data)}}),a.on("paste",function(c){e(function(){b.model[b.options.key]=a.getContent()})})}),angular.isDefined(b.options.templateOptions)&&angular.isDefined(b.options.templateOptions.rows)&&angular.isNumber(b.options.templateOptions.rows)&&(g.settings.rows=b.options.templateOptions.rows)},g.init()}]),angular.module("ambersive.formly").controller("FormlyBootstrapsDateCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv","$locale","$filter","$timeout",function(a,b,c,d,e,f,g){var h=this,i=new Date;h.order=[];var j=e.DATETIME_FORMATS;b.months=j.MONTH,b.options.templateOptions.time===undefined&&(b.options.templateOptions.time=!1),b.options.templateOptions.yearStart!==undefined&&b.options.templateOptions.yearStop!==undefined?(h.years=d.dateHelper.yearListByStartAndStop(b.options.templateOptions.yearStart,b.options.templateOptions.yearStop),-1===h.years.indexOf(i.getFullYear())&&(h.year=h.years[h.years.length-1])):(b.options.templateOptions.yearFromNow===undefined&&(b.options.templateOptions.yearFromNow=5),b.options.templateOptions.yearStart===undefined&&(b.options.templateOptions.yearStart=h.year),h.years=d.dateHelper.yearList(b.options.templateOptions.yearFromNow,b.options.templateOptions.yearStart),-1===h.years.indexOf(i.getFullYear())&&(h.year=h.years[h.years.length-1])),h.month=i.getUTCMonth()+1,h.day=i.getUTCDate(),h.hour=0,h.minute=0,h.second=0,h.year===undefined&&(h.year=i.getFullYear()),h.days=d.dateHelper.daysListForMonthAndYear(h.month,h.year),h.months=d.dateHelper.monthList(),h.getInputClass=function(){return d.getInputClass(b.options)},h.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},h.isNotADateDelimiter=function(a){var d=new RegExp(c.dateDelimiter);return b.options.templateOptions.dateDelimiter!==undefined&&angular.isString(b.options.templateOptions.dateDelimiter)&&(d=new RegExp(b.options.templateOptions.dateDelimiter)),d.test(a)},h.getPartByDelimiterShortcut=function(a){var b="";switch(a.toLowerCase()){case"d":b="FormlyBootstrapDate_day";break;case"m":b="FormlyBootstrapDate_month";break;case"y":b="FormlyBootstrapDate_year"}return b+=".html"},h.change=function(a){h.hour=a.getUTCHours(),h.minute=a.getUTCMinutes(),h.second=a.getUTCSeconds()},h.getCssClassForDateControl=function(a){var c="";switch(a.toLowerCase()){case"d":c=b.options.templateOptions.cssClassDay!==undefined?b.options.templateOptions.cssClassDay:b.options.templateOptions.time===!0?"col-xs-3":"col-xs-4";break;case"m":c=b.options.templateOptions.cssClassMonth!==undefined?b.options.templateOptions.cssClassMonth:b.options.templateOptions.time===!0?"col-xs-3":"col-xs-4";break;case"y":c=b.options.templateOptions.cssClassYear!==undefined?b.options.templateOptions.cssClassYear:b.options.templateOptions.time===!0?"col-xs-2":"col-xs-4";break;case"time":c=b.options.templateOptions.cssClassTime!==undefined?b.options.templateOptions.cssClassTime:"col-xs-4"}return c},h.init=function(){var a=c.dateFormat,d=c.dateLayout,e=new RegExp(c.dateDelimiter),f=function(a){return e.test(a)===!1?a:void 0},i=[],j=null,k=null,l=1,m=1,n=(new Date).getFullYear(),o=null,p=null,q=null;if(b.options.templateOptions.dateFormat!==undefined&&angular.isString(b.options.templateOptions.dateFormat)&&(a=b.options.templateOptions.dateFormat),b.options.templateOptions.dateLayout!==undefined&&angular.isString(b.options.templateOptions.dateLayout)&&(d=b.options.templateOptions.dateLayout),b.options.templateOptions.dateDelimiter!==undefined&&angular.isString(b.options.templateOptions.dateDelimiter)&&(e=new RegExp(b.options.templateOptions.dateDelimiter)),h.order=d.split(e),i=a.split(e),a!==d&&(h.order=d.split(e)),j=angular.copy(i).filter(f),b.model[b.options.key]!==undefined){if(p=b.model[b.options.key],q=angular.copy(p),o=new Date(q),""===p)return;null!==p&angular.isString(p)?(p=p.split(e).filter(f),j.forEach(function(a,b){switch(a.toLowerCase()){case"y":n=parseInt(p[b]);break;case"m":m=parseInt(p[b]);break;case"d":l=parseInt(p[b])}}),k=new Date(Date.UTC(n,m-1,l,o.getUTCHours(),o.getUTCMinutes(),o.getUTCSeconds()))):k=angular.isDate(p)?p:new Date(Date.UTC(n,m-1,l)),h.month=k.getUTCMonth(),h.month+=1,h.day=k.getUTCDate(),h.year=k.getFullYear(),h.hour=k.getUTCHours(),h.minute=k.getUTCMinutes(),h.second=k.getUTCSeconds(),b.model[b.options.key]=k,g(function(){b.model[b.options.key]=k})}},h.getMonthName=function(a){var d=c.monthFormat,e="";return b.options.templateOptions.monthFormat!==undefined&&(d=b.options.templateOptions.monthFormat),e=f("date")(new Date(h.year,a-1),d)},b.$watchGroup(["FormlyBootstrapDate.month","FormlyBootstrapDate.year"],function(a,b,c){h.days=d.dateHelper.daysListForMonthAndYear(h.month,h.year)}),b.$watchGroup(["FormlyBootstrapDate.day","FormlyBootstrapDate.month","FormlyBootstrapDate.year"],function(a,c,d){var e=new Date(Date.UTC(h.year,h.month-1,h.day,h.hour,h.minute,h.second));b.model[b.options.key]=e}),b.$on("updateDateFormly",function(a,c){var d=new Date(Date.UTC(h.year,h.month-1,h.day,h.hour,h.minute,h.second));b.model[b.options.key]=d,g(function(){b.$apply()})}),h.init()}]),angular.module("ambersive.formly").controller("FormlyBootstrapsCheckboxCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)}}]),angular.module("ambersive.formly").controller("FormlyBootstrapsCheckboxListCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.inited=!1,e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)},e.getOptionLabel=d.getOptionLabel,e.init=function(){var a=b.options.templateOptions.options.length,c=[];angular.forEach(b.options.templateOptions.options,function(d,f){b.model[b.options.key]===undefined&&(b.model[b.options.key]=[]),d[b.options.templateOptions.valueProp]!==undefined&&b.model[b.options.key].indexOf(d[b.options.templateOptions.valueProp])>-1&&(d.isSelected=!0),c.push(d),f+1===a&&(b.options.templateOptions.options=c,e.inited=!0)})},e.init(),b.$watch("options.templateOptions.options",function(a,c){if(0!==b.options.templateOptions.options.length){e.inited===!1&&e.init();var d=[];if(a!==undefined){var f=a.length;f>0&&angular.forEach(a,function(a,c){a.isSelected===!0&&d.push(a[b.options.templateOptions.valueProp]),c+1===f&&e.inited===!0&&(b.model[b.options.key]=d)})}}},!0)}]),angular.module("ambersive.formly").controller("FormlyBootstrapsRadioCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.getOptionLabel=d.getOptionLabel,e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)}}]),angular.module("ambersive.formly").controller("FormlyBootstrapsAutocompleteCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.getOptionLabel=d.getOptionLabel,e.hasAddon=d.hasAddon,e.hasAddonAction=d.hasAddonAction,e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)}}]),angular.module("ambersive.formly").controller("FormlyBootstrapsCodemirrorCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)},b.options.templateOptions.codemirrorOptions===undefined&&(b.options.templateOptions.codemirrorOptions={})}]),angular.module("ambersive.formly").controller("FormlyBootstrapsListCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.modelDataParent=b.model,e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.getBtnClass=function(){return b.options.templateOptions.cssBtn},e.getListClass=function(){return b.options.templateOptions.cssListEntry},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)},e.getCssClassList=function(){var a="col-sm-8 col-xs-12";return angular.isDefined(b.options.templateOptions)&&angular.isDefined(b.options.templateOptions.cssClassList)&&(a=b.options.templateOptions.cssClassList),a},e.getCssClassListBtn=function(){var a="col-sm-4 col-xs-12";return angular.isDefined(b.options.templateOptions)&&angular.isDefined(b.options.templateOptions.cssClassListBtn)&&(a=b.options.templateOptions.cssClassListBtn),a},e.formFields=b.options.templateOptions.fields,e.formData=[],e.formDataFields=[],e.lang={},angular.isDefined(b.model[b.options.key])&&(e.formData=b.model[b.options.key]),e.add=function(a){a.preventDefault();var c=angular.copy(b.options.templateOptions.fields),d={};e.formDataFields.push(c),angular.forEach(c,function(a,c){switch(a.type){case"bootstrap_date":d[a.key]=new Date;break;default:angular.isDefined(a.defaultValue)?angular.isFunction(a.defaultValue)?d[a.key]=a.defaultValue(a,b.options,b):d[a.key]=a.defaultValue:d[a.key]=""}c+1===b.options.templateOptions.fields.length&&e.formData.push(d)})},e.remove=function(a,b){b.preventDefault(),e.formData.splice(a,1),e.formDataFields.splice(a,1)},e.init=function(){e.lang.add=c.lang.add,e.lang.remove=c.lang.remove,angular.isDefined(b.options.templateOptions.lang)&&(angular.isDefined(b.options.templateOptions.lang.add)&&(e.lang.add=b.options.templateOptions.lang.add),angular.isDefined(b.options.templateOptions.lang.remove)&&(e.lang.remove=b.options.templateOptions.lang.remove)),angular.isArray(e.formData)===!0&&(e.formDataFields=[],angular.forEach(e.formData,function(){var a=angular.copy(b.options.templateOptions.fields);e.formDataFields.push(a)}))},e.init(),b.model[b.options.key]=e.formData}]),angular.module("ambersive.formly").controller("FormlyBootstrapsInfosCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getGroupClass=function(){return d.getGroupClass(b.options,d.resolveModelByKey(b.model,b.options.key))},e.hide=!1,e.toggle=function(a){a.preventDefault(),angular.isDefined(b.options.templateOptions.toggle)!==!1&&b.options.templateOptions.toggle!==!1&&(e.hide=!e.hide)},e.init=function(){angular.isDefined(b.options.templateOptions.toggle)===!0&&b.options.templateOptions.toggle===!0&&(e.hide=!0)},""!==b.options.templateOptions.headline&&b.options.templateOptions.headline!==undefined&&(e.headline="<"+(b.options.templateOptions.headlineSize||"h1")+">"+b.options.templateOptions.headline+"</"+(b.options.templateOptions.headlineSize||"h1")+">"),""!==b.options.templateOptions.text&&b.options.templateOptions.text!==undefined&&(e.infos=b.options.templateOptions.text),e.init()}])}(window,document,void 0),angular.module("ambersive.formly").run(["$templateCache",function(a){"use strict";a.put("src/views/formly.ambersive.autocomplete.html",'<div class=form-group ng-class=FormlyBootstrapsAutocomplete.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><div class=input-group ng-if=FormlyBootstrapsAutocomplete.hasAddon(null,options)><div class=input-group-addon ng-if="FormlyBootstrapsAutocomplete.hasAddon(\'left\',options)" ng-bind-html=options.templateOptions.addons.left.content ng-click="FormlyBootstrapsAutocomplete.hasAddonAction(\'left\',options)"></div><input type={{to.type}} ng-model=model[options.key] uib-typeahead="option for option in options.templateOptions.options | filter:$viewValue | limitTo:8" class=form-control ng-disabled=options.templateOptions.disabled ng-class=FormlyBootstrapsAutocomplete.getInputClass(options); id=inp_{{options.key}} placeholder={{to.placeholder}}><div class=input-group-addon ng-if="FormlyBootstrapsAutocomplete.hasAddon(\'right\',options)" ng-bind-html=options.templateOptions.addons.right.content ng-click="FormlyBootstrapsAutocomplete.hasAddonAction(\'right\',options)"></div></div><input type={{to.type}} ng-if="FormlyBootstrapsAutocomplete.hasAddon(null,options) === false" ng-model=model[options.key] uib-typeahead="option for option in options.templateOptions.options | filter:$viewValue | limitTo:8" class=form-control ng-disabled=options.templateOptions.disabled ng-class=FormlyBootstrapsAutocomplete.getInputClass(options); id=inp_{{options.key}} placeholder={{to.placeholder}}> <small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapsAutocomplete.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.check.html",'<div class=form-group ng-class=FormlyBootstrapCheck.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><div class=input-group><input type={{to.type}} ng-model=FormlyBootstrapCheck.value class=form-control ng-disabled=options.templateOptions.disabled ng-class=FormlyBootstrapCheck.getInputClass(options); id=inp_{{options.key}} placeholder={{to.placeholder}}><div class=input-group-addon ng-bind-html=FormlyBootstrapCheck.content ng-click=FormlyBootstrapCheck.force()></div></div><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapCheck.getErrorMessage(key,value); }}</small></div></div>'),
a.put("src/views/formly.ambersive.checkbox.html",'<div class=form-group ng-class=FormlyBootstrapCheckbox.getGroupClass(options);><div class=checkbox><label for=inp_{{options.key}}><input ng-class=FormlyBootstrap.getInputClass(options); ng-model=model[options.key] id=inp_{{options.key}} type=checkbox ng-disabled=options.templateOptions.disabled> {{to.label}} <span class=required ng-if=options.templateOptions.required>*</span><p class=small ng-if="options.templateOptions.more !== undefined">{{options.templateOptions.more}}</p><div class=checkbox_iframe_container ng-if="options.templateOptions.iframe !== undefined && options.templateOptions.iframe !== \'\'"><iframe class=checkbox_iframe ng-src={{options.templateOptions.iframe}}></iframe></div></label></div><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrap.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.checkbox.list.html",'<div class=form-group ng-class=FormlyBootstrapCheckboxList.getGroupClass(options);><label>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><div class=checkbox ng-repeat="option in options.templateOptions.options track by $index"><label><input ng-class=FormlyBootstrapCheckboxList.getInputClass(options); ng-model=option.isSelected id=inp_{{options.key}} type=checkbox ng-disabled=options.templateOptions.disabled> {{ FormlyBootstrapCheckboxList.getOptionLabel(option,options.templateOptions.labelProp) }} <span class=required ng-if=options.templateOptions.required>*</span><br><small ng-if="options.templateOptions.descriptionProp !== undefined && options.templateOptions.descriptionProp !== \'\'">{{ FormlyBootstrapCheckboxList.getOptionLabel(option,options.templateOptions.descriptionProp) }}</small></label></div><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapCheckboxList.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.codemirror.html",'<div class=form-group ng-class=FormlyBootstrapCodemirror.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><ui-codemirror ng-model=model[options.key] ui-codemirror-opts=options.templateOptions.codemirrorOptions></ui-codemirror><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapCodemirror.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.color.html",'<div class=form-group ng-class=FormlyBootstrapColor.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><input colorpicker=hex ng-model=model[options.key] class=form-control ng-disabled=options.templateOptions.disabled ng-class=FormlyBootstrapColor.getInputClass(options); id=inp_{{options.key}} placeholder={{to.placeholder}}> <small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapColor.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.date.html",'<script type=text/ng-template id=FormlyBootstrapDate_day.html><div ng-if="options.templateOptions.time === false">\n        <select ng-disabled="options.templateOptions.disabled" ng-required="options.templateOptions.required" class="form-control block" ng-options="o for o in  FormlyBootstrapDate.days" ng-model="FormlyBootstrapDate.day" ng-class="FormlyBootstrap.getInputClass(options);">\n        </select>\n    </div>\n    <div ng-if="options.templateOptions.time === true">\n        <select ng-disabled="options.templateOptions.disabled" ng-required="options.templateOptions.required" class="form-control block" ng-options="o for o in  FormlyBootstrapDate.days" ng-model="FormlyBootstrapDate.day" ng-class="FormlyBootstrap.getInputClass(options);">\n        </select>\n    </div></script><script type=text/ng-template id=FormlyBootstrapDate_month.html><div ng-if="options.templateOptions.time === false">\n        <select ng-disabled="options.templateOptions.disabled" ng-required="options.templateOptions.required" class="form-control block" ng-options="FormlyBootstrapDate.getMonthName(o) for o in  FormlyBootstrapDate.months" ng-model="FormlyBootstrapDate.month" ng-class="FormlyBootstrap.getInputClass(options);">\n        </select>\n    </div>\n    <div ng-if="options.templateOptions.time === true">\n        <select ng-disabled="options.templateOptions.disabled" ng-required="options.templateOptions.required" class="form-control block" ng-options="FormlyBootstrapDate.getMonthName(o) for o in  FormlyBootstrapDate.months" ng-model="FormlyBootstrapDate.month" ng-class="FormlyBootstrap.getInputClass(options);">\n        </select>\n    </div></script><script type=text/ng-template id=FormlyBootstrapDate_year.html><div ng-if="options.templateOptions.time === false">\n        <select ng-disabled="options.templateOptions.disabled" ng-required="options.templateOptions.required" class="form-control block" ng-options="o for o in  FormlyBootstrapDate.years" ng-model="FormlyBootstrapDate.year" ng-class="FormlyBootstrap.getInputClass(options);">\n        </select>\n    </div>\n    <div ng-if="options.templateOptions.time === true">\n        <select ng-disabled="options.templateOptions.disabled" ng-required="options.templateOptions.required" class="form-control block" ng-options="o for o in  FormlyBootstrapDate.years" ng-model="FormlyBootstrapDate.year" ng-class="FormlyBootstrap.getInputClass(options);">\n        </select>\n    </div></script><div class=form-group ng-class=FormlyBootstrapDate.getGroupClass(options);><label for={{options.key}}_multiple>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><div class=row><div ng-class=FormlyBootstrapDate.getCssClassForDateControl(part) ng-repeat="part in FormlyBootstrapDate.order track by $index" ng-if="FormlyBootstrapDate.isNotADateDelimiter(part) === false" ng-include=FormlyBootstrapDate.getPartByDelimiterShortcut(part)></div><div ng-class="FormlyBootstrapDate.getCssClassForDateControl(\'time\')" ng-if="options.templateOptions.time === true"><div class=form-group><input type=time step=1 ng-change=FormlyBootstrapDate.change(model[options.key]) ng-disabled=options.templateOptions.disabled ng-required=options.templateOptions.required class="form-control block" ng-model=model[options.key] ng-class="FormlyBootstrap.getInputClass(options);"></div></div></div><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.hasServerError" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div></div></div>'),a.put("src/views/formly.ambersive.default.html",'<div class=form-group ng-class=FormlyBootstrap.getGroupClass(options,model[options.key]);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><div class=input-group ng-if=FormlyBootstrap.hasAddon(null,options)><div class=input-group-addon ng-if="FormlyBootstrap.hasAddon(\'left\',options)" ng-bind-html=options.templateOptions.addons.left.content ng-click="FormlyBootstrap.hasAddonAction(\'left\',options)"></div><input type={{to.type}} ng-model=model[options.key] class=form-control ng-disabled=options.templateOptions.disabled ng-class=FormlyBootstrap.getInputClass(options); id=inp_{{options.key}} placeholder={{to.placeholder}}><div class=input-group-addon ng-if="FormlyBootstrap.hasAddon(\'right\',options)" ng-bind-html=options.templateOptions.addons.right.content ng-click="FormlyBootstrap.hasAddonAction(\'right\',options)"></div></div><input type={{to.type}} ng-if="FormlyBootstrap.hasAddon(null,options) === false" ng-model=model[options.key] class=form-control ng-disabled=options.templateOptions.disabled ng-class=FormlyBootstrap.getInputClass(options); id=inp_{{options.key}} placeholder={{to.placeholder}}> <small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrap.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.infos.html",'<div class=info_box ng-class=FormlyBootstrapInfos.getGroupClass(options);><div class=headline ng-if="FormlyBootstrapInfos.headline !== \'\' && FormlyBootstrapInfos.headline !== undefined" ng-click=FormlyBootstrapInfos.toggle($event)><div class=pull-right ng-if="options.templateOptions.toggle === true"><div class=headline_toggle_icon ng-bind-html=options.templateOptions.toggleOpen ng-if=" FormlyBootstrapInfos.hide === false"></div><div class=headline_toggle_icon ng-bind-html=options.templateOptions.toggleClosed ng-if=" FormlyBootstrapInfos.hide === true"></div></div><span class=headline_inside ng-bind-html=FormlyBootstrapInfos.headline></span></div><div class=infos ng-if="FormlyBootstrapInfos.infos !== \'\' && FormlyBootstrapInfos.infos !== undefined" ng-hide=FormlyBootstrapInfos.hide ng-bind-html=FormlyBootstrapInfos.infos></div></div>'),a.put("src/views/formly.ambersive.list.html",'<div class=form-group ng-class=FormlyBootstrapList.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><div class=row><div class=list_container><div class=list_entry ng-repeat="listEntry in FormlyBootstrapList.formData track by $index" ng-class=FormlyBootstrapList.getListClass(options);><div class=row><div ng-class=FormlyBootstrapList.getCssClassList()><formly-form model=FormlyBootstrapList.formData[$index] fields=FormlyBootstrapList.formDataFields[$index] bind-name="$parent.$index + \'_list\'"></formly-form></div><div ng-class=FormlyBootstrapList.getCssClassListBtn()><div ng-class=FormlyBootstrapList.getBtnClass(options);><button ng-click=FormlyBootstrapList.remove($index,$event) class="btn btn-danger btn-block"><span ng-bind-html=FormlyBootstrapList.lang.remove></span></button></div></div></div></div><div class=list_add><div ng-class=FormlyBootstrapList.getGroupClass(options);><button ng-click=FormlyBootstrapList.add($event) class="btn btn-success btn-block"><span ng-bind-html=FormlyBootstrapList.lang.add></span></button></div></div></div></div><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapList.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.radio.html",'<div class=form-group ng-class=FormlyBootstrapRadio.getGroupClass(options);><label>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><div class=radio ng-repeat="option in options.templateOptions.options track by $index"><label><input type=radio name=inp_{{options.key}} id={{options.key}}{{$index}} ng-model=model[options.key] ng-value=option[options.templateOptions.valueProp]> {{ FormlyBootstrapRadio.getOptionLabel(option,options.templateOptions.labelProp) }}<p class=small ng-if="option[options.templateOptions.more] !== undefined">{{option[options.templateOptions.more]}}</p></label></div><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapRadio.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.select.html",'<div class=form-group ng-class=FormlyBootstrapSelect.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><select id=inp_{{options.key}} name=inp_{{options.key}} ng-disabled=options.templateOptions.disabled ng-options="option[options.templateOptions.valueProp] as (FormlyBootstrapSelect.getOptionLabel(option,options.templateOptions.labelProp,options.templateOptions)) for option in options.templateOptions.options" class="form-control block" ng-model=model[options.key] ng-class=FormlyBootstrapSelect.getInputClass(options);></select><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapSelect.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.select2.html",'<div class=form-group ng-class=FormlyBootstrapSelect2.getGroupClass(options);><label>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><ui-select ng-model=FormlyBootstrapSelect2.data on-select="FormlyBootstrapSelect2.choose($item, $model)"><ui-select-match placeholder={{options.templateOptions.placeholder}} ng-model=FormlyBootstrapSelect2.data><span ng-if="options.templateOptions.templateSelected === undefined && FormlyBootstrapSelect2.isDefined(options.templateOptions.templateFn) === false">{{ FormlyBootstrapSelect2.getOptionLabel($select.selected,options.templateOptions.labelProp,options.templateOptions) }}</span> <span ng-if="options.templateOptions.templateSelected !== undefined && FormlyBootstrapSelect2.isDefined(options.templateOptions.templateFn) === false" ng-include=options.templateOptions.templateSelected></span> <span ng-if="FormlyBootstrapSelect2.isDefined(options.templateOptions.templateFn) === true" ng-bind-html=options.templateOptions.templateFn($select.selected)></span></ui-select-match><ui-select-choices repeat="item in (options.templateOptions.options | filter: $select.search) track by item[options.templateOptions.valueProp]"><span ng-if="options.templateOptions.template === undefined && FormlyBootstrapSelect2.isDefined(options.templateOptions.templateFn) === false">{{ FormlyBootstrapSelect2.getOptionLabel(item,options.templateOptions.labelProp) }}</span> <span ng-if="options.templateOptions.template !== undefined && FormlyBootstrapSelect2.isDefined(options.templateOptions.templateFn) === false" ng-include=options.templateOptions.template></span> <span ng-if="options.templateOptions.template === undefined || FormlyBootstrapSelect2.isDefined(options.templateOptions.templateFn) === true" ng-bind-html=options.templateOptions.templateFn(item)></span></ui-select-choices></ui-select><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapSelect2.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.tags.html",'<div class="form-group {{FormlyBootstrapTags.customClass}}" ng-class=FormlyBootstrapTags.getGroupClass(options);><label>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><ui-select multiple theme=bootstrap ng-model=FormlyBootstrapTags.data ng-if="options.templateOptions.addTags !== true"><ui-select-match placeholder={{options.templateOptions.placeholder}} ng-model=FormlyBootstrapTags.data><span ng-if="options.templateOptions.templateSelected === undefined">{{$item[options.templateOptions.labelProp]}}</span> <span ng-if="options.templateOptions.templateSelected !== undefined" ng-include=options.templateOptions.templateSelected></span></ui-select-match><ui-select-choices repeat="item in (options.templateOptions.options | filter: $select.search) track by $index"><span ng-if="options.templateOptions.template === undefined">{{ item[options.templateOptions.labelProp] }}</span> <span ng-if="options.templateOptions.template !== undefined" ng-include=options.templateOptions.template></span></ui-select-choices></ui-select><ui-select multiple tagging=FormlyBootstrapTags.tagTransform tagging-tokens="SPACE|,|/" theme=bootstrap ng-model=FormlyBootstrapTags.data ng-if="options.templateOptions.addTags === true"><ui-select-match placeholder={{options.templateOptions.placeholder}} ng-model=FormlyBootstrapTags.data><span ng-if="options.templateOptions.templateSelected === undefined && $item[options.templateOptions.labelProp] !== undefined">{{$item[options.templateOptions.labelProp]}}</span> <span ng-if="options.templateOptions.templateSelected === undefined && $item[options.templateOptions.labelProp] === undefined">{{$item[options.templateOptions.valueProp]}}</span> <span ng-if="options.templateOptions.templateSelected !== undefined" ng-include=options.templateOptions.templateSelected></span></ui-select-match><ui-select-choices repeat="item in (options.templateOptions.options | filter: $select.search) track by $index"><span ng-if="options.templateOptions.template === undefined && item[options.templateOptions.labelProp] !== undefined">{{ item[options.templateOptions.labelProp] }}</span> <span ng-if="options.templateOptions.template === undefined && item[options.templateOptions.labelProp] === undefined">{{ item[options.templateOptions.valueProp] }}</span> <span ng-if="options.templateOptions.template !== undefined" ng-include=options.templateOptions.template></span></ui-select-choices></ui-select><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapTags.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.textarea.html",'<div class=form-group ng-class=FormlyBootstrapTextarea.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><textarea ui-tinymce=options.templateOptions.tinyMCE_Settings ng-model=model[options.key] ng-if="options.templateOptions.tinyMCE === true" class=form-control ng-class=FormlyBootstrapTextarea.getInputClass(options); placeholder={{to.placeholder}}></textarea><textarea ng-disabled=options.templateOptions.disabled ng-if="options.templateOptions.tinyMCE === false || options.templateOptions.tinyMCE === undefined" ng-model=model[options.key] rows={{FormlyBootstrapTextarea.settings.rows}} class=form-control ng-class=FormlyBootstrapTextarea.getInputClass(options); id=inp_{{options.key}} placeholder={{to.placeholder}}></textarea><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapTextarea.getErrorMessage(key,value); }}</small></div></div>')}]);