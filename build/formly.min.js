!function(a,b,c){"use strict";angular.module("ambersive.formly",["formly","ngLocale","ngMessages","ui.select","ngSanitize"]),angular.module("ambersive.formly").config(["formlyConfigProvider","FormlyBootstrapSrvProvider",function(a,b){a.setType({name:"bootstrap_input",templateUrl:"src/views/formly.ambersive.default.html",controller:"FormlyBootstrapsCtrl as FormlyBootstrap",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){b.formControl.$setValidity("server",!0)}},validators:{standardValidation:b.$get().validation}}}),a.setType({name:"bootstrap_date",templateUrl:"src/views/formly.ambersive.date.html",controller:"FormlyBootstrapsDateCtrl as FormlyBootstrapDate",defaultOptions:{templateOptions:{onChange:function(a,b,c){b.hasServerError=!1}},validators:{standardValidation:b.$get().validation}}}),a.setType({name:"bootstrap_select",templateUrl:"src/views/formly.ambersive.select.html",controller:"FormlyBootstrapsSelectCtrl as FormlyBootstrapSelect",defaultOptions:{templateOptions:{onChange:function(a,b,c){b.formControl.$setValidity("server",!0)}},validators:{standardValidation:b.$get().validation}}}),a.setType({name:"bootstrap_select2",templateUrl:"src/views/formly.ambersive.select2.html",controller:"FormlyBootstrapsSelect2Ctrl as FormlyBootstrapSelect2",defaultOptions:{templateOptions:{onChange:function(a,b,c){b.formControl.$setValidity("server",!0)}},validators:{standardValidation:b.$get().validation}}}),a.setType({name:"bootstrap_textarea",templateUrl:"src/views/formly.ambersive.textarea.html",controller:"FormlyBootstrapsTextareaCtrl as FormlyBootstrapTextarea",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){b.formControl.$setValidity("server",!0)}}}}),a.setType({name:"bootstrap_checkbox",templateUrl:"src/views/formly.ambersive.checkbox.html",controller:"FormlyBootstrapsCheckboxCtrl as FormlyBootstrapCheckbox",defaultOptions:{templateOptions:{onKeypress:function(a,b,c){b.formControl.$setValidity("server",!0)}},validators:{standardValidation:b.$get().validation}}}),a.setType({name:"bootstrap_radio",templateUrl:"src/views/formly.ambersive.radio.html",controller:"FormlyBootstrapsRadioCtrl as FormlyBootstrapRadio",defaultOptions:{templateOptions:{onChange:function(a,b,c){b.formControl.$setValidity("server",!0)}},validators:{standardValidation:b.$get().validation}}})}]),angular.module("ambersive.formly").provider("$formlyBootstrapSettings",[function(){var a={cssError:"error",cssErrorInput:"error",cssSuccess:"success",cssWarning:"warning",formControl:"form-control-",formGroup:"has-",dateLayout:"d m y",dateFormat:"d m y",dateDelimiter:"(\\.|\\/|\\-|\\s)",monthFormat:"MMMM",regex:{email:"^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$"},lang:{fallbackError:" An error occurs. Please check the field again.",required:"Please fill out the field. This field is required.",email:"This is not a valid e-mail address"},tinyMCETheme:"bootstrap",tinyMCEThemeUrl:"../build/skins/bootstrap",tinyMCE:{statusbar:!1,menubar:!1,toolbar_items_size:"small",toolbar:"bold italic | alignleft aligncenter alignright alignjustify | bullist numlist",content_css:[],plugins:["visualblocks"]}};return{setLang:function(b,d){a.lang[b]!==c&&(a.lang[b]=d)},setTinyMCE:function(b,d){a.tinyMCE[b]!==c&&(a.tinyMCE[b]=d)},setRegex:function(b,d){a.regex[b]!==c&&(a.regex[b]=d)},setValue:function(b,d){a[b]!==c&&(a[b]=d)},$get:function(){return a}}}]),angular.module("ambersive.formly").run(["$rootScope","$log","formlyConfig","formlyValidationMessages",function(a,b,c,d){c.extras.ngModelAttrsManipulatorPreferBound=!0}]),angular.module("ambersive.formly").factory("FormlyBootstrapSrv",["$q","$log","$rootScope","$formlyBootstrapSettings","$timeout",function(a,b,d,e,f){var g={};return g.errorMessages={},g.serverValidation=function(a,c){var d,e=0,f=[];angular.isDefined(a)&&angular.isObject(a)&&angular.isDefined(c)&&angular.isObject(c)?(e=c.length,a.form.$valid=0===e,a.form.$invalid=0!==e,angular.forEach(a.formFields,function(a){d=function(b){return b.field===a.key?b:void 0},angular.forEach(c,function(b,c){"server"===c&&angular.isArray(b)&&(f=angular.copy(b).filter(d),f.length>0&&angular.isDefined(a.formControl)?(a.formControl.$setValidity("server",!1),a.validation.messages=f):f.length>0&&angular.isDefined(a.formControl)===!1?(a.hasServerError=!0,a.validation.messages=f):0===f.length&&angular.isDefined(a.formControl)===!1?(a.hasServerError=!1,a.validation.messages=[]):a.formControl.$setValidity("server",!0))})})):b.warn("ambersive.formly: error while updateing the submit validation data")},g.validation=function(a,b,d){var f,g=d.options,h=!1,i=!1,j=g.templateOptions.type;switch(j===c&&(j="text"),g.templateOptions.regex!==c&&angular.isString(g.templateOptions.regex)&&(g.templateOptions.regex=[g.templateOptions.regex]),j){case"email":f=new RegExp(e.regex[j]),h=!0}return i=h===!1?!0:f.test(a)},g.getInputClass=function(a){var b="";return(a.formControl!==c&&a.formControl.$invalid===!0&&a.formControl.$untouched===!1||a.hasServerError===!0)&&(b+=" "+e.formControl+e.cssErrorInput),b},g.getGroupClass=function(a){var b="";return a.templateOptions!==c&&a.templateOptions.cssClass!==c&&(b=a.templateOptions.cssClass),(a.formControl!==c&&a.formControl.$invalid===!0&&a.formControl.$untouched===!1||a.hasServerError===!0)&&(b+=" "+e.formGroup+e.cssError),b},g.dateHelper={daysForMonth:function(a,b){return a===c&&(a=1),b===c&&(b=(new Date).getFullYear()),new Date(b,a,0).getDate()},daysListForMonthAndYear:function(a,b){for(var c=[],d=g.dateHelper.daysForMonth(a,b),e=0;d>e;e+=1)c.push(e+1);return c},monthList:function(){for(var a=[],b=0;12>b;b+=1)a.push(b+1);return a},yearList:function(a,b){var d=[],e=(new Date).getFullYear();a===c&&(a=30),b===c&&(b=1900),e+=a+1;for(var f=b;e>f;f+=1)d.push(f);return d},yearListByStartAndStop:function(a,b){var d=[];b===c&&(b=(new Date).getFullYear()),a===c&&(a=1900);for(var e=a;b>e;e+=1)d.push(e);return d}},g.getErrorMessage=function(a,b,c){var d=e.lang[b];return angular.isDefined(d)===!1&&"standardValidation"===b&&(d=e.lang[a.templateOptions.type]),angular.isDefined(d)===!1&&(d=e.lang.fallbackError),d},g}]),angular.module("ambersive.formly").controller("FormlyBootstrapsCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options)},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)}}]),angular.module("ambersive.formly").controller("FormlyBootstrapsSelectCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options)},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)}}]),angular.module("ambersive.formly").controller("FormlyBootstrapsSelect2Ctrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options)},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)},e.choose=function(c,d){b.model[b.options.key]=c[b.options.templateOptions.valueProp],a.$broadcast("changeValue",{item:c,options:b.options})}}]),angular.module("ambersive.formly").controller("FormlyBootstrapsTextareaCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv","$timeout","$sce",function(a,b,c,d,e,f){var g=this;g.settings={rows:3},g.getInputClass=function(){return d.getInputClass(b.options)},g.getGroupClass=function(){var a=d.getGroupClass(b.options);return b.options.templateOptions.hasFocus===!0&&(a+=" focus"),a},g.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)},g.init=function(){var a=c.tinyMCE;angular.isDefined(b.options.templateOptions)&&(angular.isDefined(b.options.templateOptions.rows)&&angular.isNumber(b.options.templateOptions.rows)&&(g.settings.rows=b.options.templateOptions.rows),angular.isDefined(b.options.templateOptions.tinyMCE)&&b.options.templateOptions.tinyMCE===!0&&angular.isDefined(tinymce)===!0&&(a.selector='*[name="'+b.options.id+'"]',a.skin=c.tinyMCETheme,a.skin_url=c.tinyMCEThemeUrl,a.setup=function(a){var c=function(){b.model[b.options.key]=a.getContent({format:"html"}).trim(),b.$apply()};a.on("init",function(){c()}),a.on("ExecCommand change NodeChange ObjectResized",function(){c()}),a.on("keyUp",function(){c()}),a.on("focus",function(){b.options.templateOptions.hasFocus=!0,c()}),a.on("blur",function(){b.options.formControl.$setTouched(),b.options.templateOptions.hasFocus=!1,c()})},angular.isDefined(b.options.templateOptions.tinyMCE_Settings)&&(a=angular.extend(a,b.options.templateOptions.tinyMCE_Settings)),tinymce.init(a)))},g.init()}]),angular.module("ambersive.formly").controller("FormlyBootstrapsDateCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv","$locale","$filter",function(a,b,d,e,f,g){var h=this,i=new Date;h.order=[];var j=f.DATETIME_FORMATS;b.months=j.MONTH,b.options.templateOptions.yearStart!==c&&b.options.templateOptions.yearStop!==c?(h.years=e.dateHelper.yearListByStartAndStop(b.options.templateOptions.yearStart,b.options.templateOptions.yearStop),-1===h.years.indexOf(i.getFullYear())&&(h.year=h.years[h.years.length-1])):(b.options.templateOptions.yearFromNow===c&&(b.options.templateOptions.yearFromNow=5),b.options.templateOptions.yearStart===c&&(b.options.templateOptions.yearStart=h.year),h.years=e.dateHelper.yearList(b.options.templateOptions.yearFromNow,b.options.templateOptions.yearStart),-1===h.years.indexOf(i.getFullYear())&&(h.year=h.years[h.years.length-1])),h.month=i.getMonth()+1,h.day=i.getDate(),h.year===c&&(h.year=i.getFullYear()),h.days=e.dateHelper.daysListForMonthAndYear(h.month,h.year),h.months=e.dateHelper.monthList(),h.getInputClass=function(){return e.getInputClass(b.options)},h.getGroupClass=function(){return e.getGroupClass(b.options)},h.isNotADateDelimiter=function(a){var e=new RegExp(d.dateDelimiter);return b.options.templateOptions.dateDelimiter!==c&&angular.isString(b.options.templateOptions.dateDelimiter)&&(e=new RegExp(b.options.templateOptions.dateDelimiter)),e.test(a)},h.getPartByDelimiterShortcut=function(a){var b="";switch(a.toLowerCase()){case"d":b="FormlyBootstrapDate_day";break;case"m":b="FormlyBootstrapDate_month";break;case"y":b="FormlyBootstrapDate_year"}return b+=".html"},h.init=function(){var a=d.dateFormat,e=d.dateLayout,f=new RegExp(d.dateDelimiter),g=function(a){return f.test(a)===!1?a:void 0},i=[],j=null,k=null,l=1,m=1,n=(new Date).getFullYear(),o=null;if(b.options.templateOptions.dateFormat!==c&&angular.isString(b.options.templateOptions.dateFormat)&&(a=b.options.templateOptions.dateFormat),b.options.templateOptions.dateLayout!==c&&angular.isString(b.options.templateOptions.dateLayout)&&(e=b.options.templateOptions.dateLayout),b.options.templateOptions.dateDelimiter!==c&&angular.isString(b.options.templateOptions.dateDelimiter)&&(f=new RegExp(b.options.templateOptions.dateDelimiter)),h.order=e.split(f),i=a.split(f),a!==e&&(h.order=e.split(f)),j=angular.copy(i).filter(g),b.model[b.options.key]!==c){if(o=b.model[b.options.key],""===o)return;null!==o&angular.isString(o)?(o=o.split(f).filter(g),j.forEach(function(a,b){switch(a.toLowerCase()){case"y":n=parseInt(o[b]);break;case"m":m=parseInt(o[b]);break;default:l=parseInt(o[b])}}),k=new Date(n,m,l+1)):angular.isDate(o)&&(k=o),h.month=k.getMonth(),h.day=k.getDate(),h.year=k.getFullYear()}},h.getMonthName=function(a){var e=d.monthFormat,f="";return b.options.templateOptions.monthFormat!==c&&(e=b.options.templateOptions.monthFormat),f=g("date")(new Date(h.year,a-1),e)},b.$watchGroup(["FormlyBootstrapDate.month","FormlyBootstrapDate.year"],function(a,b,c){h.days=e.dateHelper.daysListForMonthAndYear(h.month,h.year)}),b.$watchGroup(["FormlyBootstrapDate.day","FormlyBootstrapDate.month","FormlyBootstrapDate.year"],function(a,c,d){b.model[b.options.key]=new Date(h.year,h.month-1,h.day),b.options.hasServerError=!1}),h.init()}]),angular.module("ambersive.formly").controller("FormlyBootstrapsCheckboxCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options)},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)};var f=b.$on("fileToUpload",function(a,c){b.formData=c});b.$on("$destroy",f)}]),angular.module("ambersive.formly").controller("FormlyBootstrapsRadioCtrl",["$rootScope","$scope","$formlyBootstrapSettings","FormlyBootstrapSrv",function(a,b,c,d){var e=this;e.getInputClass=function(){return d.getInputClass(b.options)},e.getGroupClass=function(){return d.getGroupClass(b.options)},e.getErrorMessage=function(a,c){return d.getErrorMessage(b.options,a,c)}}])}(window,document,void 0),angular.module("ambersive.formly").run(["$templateCache",function(a){"use strict";a.put("src/views/formly.ambersive.checkbox.html",'<div class=form-group ng-class=FormlyBootstrapCheckbox.getGroupClass(options);><div class=checkbox><label for=inp_{{options.key}}><input ng-class=FormlyBootstrap.getInputClass(options); ng-model=model[options.key] id=inp_{{options.key}} type=checkbox ng-disabled=options.templateOptions.disabled> {{to.label}} <span class=required ng-if=options.templateOptions.required>*</span><p class=small ng-if="options.templateOptions.more !== undefined">{{options.templateOptions.more}}</p><div class=checkbox_iframe_container ng-if="options.templateOptions.iframe !== undefined && options.templateOptions.iframe !== \'\'"><iframe class=checkbox_iframe ng-src={{options.templateOptions.iframe}}></iframe></div></label></div><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrap.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.date.html",'<script type=text/ng-template id=FormlyBootstrapDate_day.html><div class="col-xs-3">\n        <select ng-disabled="options.templateOptions.disabled" ng-required="options.templateOptions.required" class="form-control block" ng-options="o for o in  FormlyBootstrapDate.days" ng-model="FormlyBootstrapDate.day" ng-class="FormlyBootstrap.getInputClass(options);">\n        </select>\n    </div></script><script type=text/ng-template id=FormlyBootstrapDate_month.html><div class="col-xs-5">\n        <select ng-disabled="options.templateOptions.disabled" ng-required="options.templateOptions.required" class="form-control block" ng-options="FormlyBootstrapDate.getMonthName(o) for o in  FormlyBootstrapDate.months" ng-model="FormlyBootstrapDate.month" ng-class="FormlyBootstrap.getInputClass(options);">\n        </select>\n    </div></script><script type=text/ng-template id=FormlyBootstrapDate_year.html><div class="col-xs-4">\n        <select ng-disabled="options.templateOptions.disabled" ng-required="options.templateOptions.required" class="form-control block" ng-options="o for o in  FormlyBootstrapDate.years" ng-model="FormlyBootstrapDate.year" ng-class="FormlyBootstrap.getInputClass(options);">\n        </select>\n    </div></script><div class="form-group form-group-multiple" ng-class=FormlyBootstrapDate.getGroupClass(options);><label for={{options.key}}_multiple>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><div class=row><div ng-repeat="part in FormlyBootstrapDate.order track by $index" ng-if="FormlyBootstrapDate.isNotADateDelimiter(part) === false" ng-include=FormlyBootstrapDate.getPartByDelimiterShortcut(part)></div></div><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.hasServerError" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div></div></div>'),a.put("src/views/formly.ambersive.default.html",'<div class=form-group ng-class=FormlyBootstrap.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><input type={{to.type}} ng-model=model[options.key] class=form-control ng-disabled=options.templateOptions.disabled ng-class=FormlyBootstrap.getInputClass(options); id=inp_{{options.key}} placeholder={{to.placeholder}}> <small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrap.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.radio.html",'<div class=form-group ng-class=FormlyBootstrapRadio.getGroupClass(options);><label>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><div class=radio ng-repeat="option in options.templateOptions.options track by $index"><label><input type=radio name=inp_{{options.key}} id={{options.key}}{{$index}} ng-model=model[options.key] ng-value=option[options.templateOptions.valueProp]> {{option[options.templateOptions.labelProp]}}<p class=small ng-if="option[options.templateOptions.more] !== undefined">{{option[options.templateOptions.more]}}</p></label></div><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapRadio.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.select.html",'<div class=form-group ng-class=FormlyBootstrapSelect.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><select id=inp_{{options.key}} name=inp_{{options.key}} ng-disabled=options.templateOptions.disabled ng-options="option[options.templateOptions.valueProp] as option[options.templateOptions.labelProp] for option in options.templateOptions.options" class="form-control block" ng-model=model[options.key] ng-options="" ng-class=FormlyBootstrapSelect.getInputClass(options);></select><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapSelect.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.select2.html",'<div class=form-group ng-class=FormlyBootstrapSelect2.getGroupClass(options);><label>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><ui-select ng-model=FormlyBootstrapSelect2.data on-select="FormlyBootstrapSelect2.choose($item, $model)"><ui-select-match placeholder={{options.templateOptions.placeholder}}><span ng-if="options.templateOptions.templateSelected === undefined">{{$select.selected.name}}</span> <span ng-if="options.templateOptions.templateSelected !== undefined" ng-include=options.templateOptions.templateSelected></span></ui-select-match><ui-select-choices repeat="item in (options.templateOptions.options | filter: $select.search) track by item[options.templateOptions.valueProp]"><span ng-if="options.templateOptions.template === undefined">{{ item[options.templateOptions.labelProp] }}</span> <span ng-if="options.templateOptions.template !== undefined" ng-include=options.templateOptions.template></span></ui-select-choices></ui-select><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapSelect2.getErrorMessage(key,value); }}</small></div></div>'),a.put("src/views/formly.ambersive.textarea.html",'<div class=form-group ng-class=FormlyBootstrapTextarea.getGroupClass(options);><label for=inp_{{options.key}}>{{to.label}} <span class=required ng-if=options.templateOptions.required>*</span></label><textarea ng-disabled=options.templateOptions.disabled ng-model=model[options.key] rows={{FormlyBootstrapTextarea.settings.rows}} class=form-control ng-class=FormlyBootstrapTextarea.getInputClass(options); id=inp_{{options.key}} placeholder={{to.placeholder}}></textarea><small class=text-muted ng-if="to.help !== undefined && showError !== true">{{to.help}}</small><div ng-messages=fc.$error ng-if="form.$submitted || options.formControl.$touched" class=error-messages><div class=text-danger ng-repeat="obj in options.validation.messages"><small>{{obj.message}}</small></div><small class=text-danger ng-message={{key}} ng-repeat="(key, value) in fc.$error" ng-if="key !== \'server\'">{{ FormlyBootstrapTextarea.getErrorMessage(key,value); }}</small></div></div>')}]);